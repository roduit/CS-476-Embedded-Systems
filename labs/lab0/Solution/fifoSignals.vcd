$date
	Fri Mar  1 11:37:27 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fifoTestbench $end
$scope module DUT $end
$var wire 1 ! clock $end
$var wire 1 " empty $end
$var wire 1 # full $end
$var wire 1 $ pop $end
$var wire 1 % push $end
$var wire 8 & pushData [7:0] $end
$var wire 1 ' reset $end
$var wire 1 ( s_doPop $end
$var wire 1 ) s_doPush $end
$var wire 3 * s_pushPointer [2:0] $end
$var wire 3 + s_popPointer [2:0] $end
$var wire 1 , s_full $end
$var wire 1 - s_empty $end
$var wire 8 . popData [7:0] $end
$var parameter 32 / bitWidth $end
$var parameter 32 0 nrOfEntries $end
$var parameter 32 1 nrOfPointerBits $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var wire 1 ! clockA $end
$var wire 1 ! clockB $end
$var wire 8 2 dataIn [7:0] $end
$var wire 1 ) writeEnable $end
$var wire 3 3 addressB [2:0] $end
$var wire 3 4 addressA [2:0] $end
$var parameter 32 5 bitwidth $end
$var parameter 32 6 nrOfEntries $end
$var parameter 32 7 readAfterWrite $end
$var reg 8 8 dataOutA [7:0] $end
$var reg 8 9 dataOutB [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 : \memoryContent[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 ; \memoryContent[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 < \memoryContent[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 = \memoryContent[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 > \memoryContent[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 ? \memoryContent[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 @ \memoryContent[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 A \memoryContent[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1 7
b1000 6
b1000 5
b11 1
b1000 0
b1000 /
$end
#0
$dumpvars
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 4
bx 3
b101 2
bx .
x-
x,
bx +
bx *
0)
0(
1'
b101 &
0%
0$
x#
x"
0!
$end
#5
0#
0,
1"
1-
b0 *
b0 4
b0 +
b0 3
1!
#10
0!
#15
1!
#20
0'
0!
#25
1!
#30
0!
#35
1!
#40
1)
1%
0!
#45
0"
0-
b1 *
b1 4
b101 :
1!
#50
b110 &
b110 2
0!
#55
b10 *
b10 4
b101 .
b101 9
b110 ;
1!
#60
b111 &
b111 2
0!
#65
b11 *
b11 4
b111 <
1!
#70
b1000 &
b1000 2
0!
#75
b100 *
b100 4
b1000 =
1!
#80
1(
1$
b1001 &
b1001 2
0!
#85
b101 *
b101 4
b1 +
b1 3
b1001 >
1!
#90
b1010 &
b1010 2
0!
#95
b10 +
b10 3
b110 *
b110 4
b110 .
b110 9
b1010 ?
1!
#100
b1011 &
b1011 2
0!
#105
b111 *
b111 4
b11 +
b11 3
b1011 @
b111 .
b111 9
1!
#110
b1100 &
b1100 2
0!
#115
b100 +
b100 3
b0 *
b0 4
b1000 .
b1000 9
b1100 A
1!
#120
b1101 &
b1101 2
0!
#125
b1 *
b1 4
b101 +
b101 3
b1101 :
b101 8
b1001 .
b1001 9
1!
#130
b1110 &
b1110 2
0!
#135
b110 +
b110 3
b10 *
b10 4
b1010 .
b1010 9
b1110 ;
b110 8
1!
#140
b1111 &
b1111 2
0!
#145
b11 *
b11 4
b111 +
b111 3
b1111 <
b111 8
b1011 .
b1011 9
1!
#150
b10000 &
b10000 2
0!
#155
b0 +
b0 3
b100 *
b100 4
b1100 .
b1100 9
b10000 =
b1000 8
1!
#160
b10001 &
b10001 2
0!
#165
b101 *
b101 4
b1 +
b1 3
b10001 >
b1001 8
b1101 .
b1101 9
1!
#170
b10010 &
b10010 2
0!
#175
b10 +
b10 3
b110 *
b110 4
b1110 .
b1110 9
b10010 ?
b1010 8
1!
#180
b10011 &
b10011 2
0!
#185
b111 *
b111 4
b11 +
b11 3
b10011 @
b1011 8
b1111 .
b1111 9
1!
#190
b10100 &
b10100 2
0!
#195
b100 +
b100 3
b0 *
b0 4
b10000 .
b10000 9
b10100 A
b1100 8
1!
#200
b10101 &
b10101 2
0!
#205
b1 *
b1 4
b101 +
b101 3
b10101 :
b1101 8
b10001 .
b10001 9
1!
#210
b10110 &
b10110 2
0!
#215
b110 +
b110 3
b10 *
b10 4
b10010 .
b10010 9
b10110 ;
b1110 8
1!
#220
b10111 &
b10111 2
0!
#225
b11 *
b11 4
b111 +
b111 3
b10111 <
b1111 8
b10011 .
b10011 9
1!
#230
b11000 &
b11000 2
0!
#235
b0 +
b0 3
b100 *
b100 4
b10100 .
b10100 9
b11000 =
b10000 8
1!
#240
b11001 &
b11001 2
0!
#245
b101 *
b101 4
b1 +
b1 3
b11001 >
b10001 8
b10101 .
b10101 9
1!
#250
b11010 &
b11010 2
0!
#255
b10 +
b10 3
b110 *
b110 4
b10110 .
b10110 9
b11010 ?
b10010 8
1!
#260
b11011 &
b11011 2
0!
#265
b111 *
b111 4
b11 +
b11 3
b11011 @
b10011 8
b10111 .
b10111 9
1!
#270
b11100 &
b11100 2
0!
#275
b100 +
b100 3
b0 *
b0 4
b11000 .
b11000 9
b11100 A
b10100 8
1!
#280
b11101 &
b11101 2
0!
#285
b1 *
b1 4
b101 +
b101 3
b11101 :
b10101 8
b11001 .
b11001 9
1!
#290
b11110 &
b11110 2
0!
#295
b110 +
b110 3
b10 *
b10 4
b11010 .
b11010 9
b11110 ;
b10110 8
1!
#300
b11111 &
b11111 2
0!
#305
b11 *
b11 4
b111 +
b111 3
b11111 <
b10111 8
b11011 .
b11011 9
1!
#310
b100000 &
b100000 2
0!
#315
b0 +
b0 3
b100 *
b100 4
b11100 .
b11100 9
b100000 =
b11000 8
1!
#320
b100001 &
b100001 2
0!
#325
b101 *
b101 4
b1 +
b1 3
b100001 >
b11001 8
b11101 .
b11101 9
1!
#330
b100010 &
b100010 2
0!
#335
b10 +
b10 3
b110 *
b110 4
b11110 .
b11110 9
b100010 ?
b11010 8
1!
#340
b100011 &
b100011 2
0!
#345
b111 *
b111 4
b11 +
b11 3
b100011 @
b11011 8
b11111 .
b11111 9
1!
#350
b100100 &
b100100 2
0!
#355
b100 +
b100 3
b0 *
b0 4
b100000 .
b100000 9
b100100 A
b11100 8
1!
#360
b100101 &
b100101 2
0!
#365
b1 *
b1 4
b101 +
b101 3
b100101 :
b11101 8
b100001 .
b100001 9
1!
#370
b100110 &
b100110 2
0!
#375
b110 +
b110 3
b10 *
b10 4
b100010 .
b100010 9
b100110 ;
b11110 8
1!
#380
b100111 &
b100111 2
0!
