$date
	Sun Mar  3 22:00:23 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fifoTestbench $end
$scope module DUT $end
$var wire 1 ! clock $end
$var wire 1 " do_pop $end
$var wire 1 # do_push $end
$var wire 1 $ empty $end
$var wire 1 % full $end
$var wire 1 & pop $end
$var wire 1 ' push $end
$var wire 8 ( pushData [7:0] $end
$var wire 1 ) reset $end
$var wire 3 * writeAddress [2:0] $end
$var wire 3 + readAddress [2:0] $end
$var wire 8 , popData [7:0] $end
$var wire 1 - isFullCounter $end
$var wire 1 . isEmptyCounter $end
$var parameter 32 / bitWidth $end
$var parameter 32 0 nrOfEntries $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var wire 3 1 addressA [2:0] $end
$var wire 3 2 addressB [2:0] $end
$var wire 1 ! clockA $end
$var wire 1 ! clockB $end
$var wire 8 3 dataIn [7:0] $end
$var wire 1 # writeEnable $end
$var parameter 32 4 bitwidth $end
$var parameter 32 5 nrOfEntries $end
$var parameter 32 6 readAfterWrite $end
$var reg 8 7 dataOutA [7:0] $end
$var reg 8 8 dataOutB [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 9 \memoryContent[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 : \memoryContent[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 ; \memoryContent[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 < \memoryContent[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 = \memoryContent[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 > \memoryContent[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 ? \memoryContent[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 @ \memoryContent[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1 6
b1000 5
b1000 4
b1000 0
b1000 /
$end
#0
$dumpvars
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
b101 3
bx 2
bx 1
x.
x-
bx ,
bx +
bx *
1)
b101 (
0'
0&
x%
x$
0#
0"
0!
$end
#5
1$
1.
0%
0-
b0 *
b0 1
b0 +
b0 2
1!
#10
0!
#15
1!
#20
0)
0!
#25
1!
#30
0!
#35
1!
#40
1#
1'
0!
#45
0$
0.
b1 *
b1 1
b101 9
1!
#50
b110 (
b110 3
0!
#55
b10 *
b10 1
b101 ,
b101 8
b110 :
1!
#60
b111 (
b111 3
0!
#65
b11 *
b11 1
b111 ;
1!
#70
b1000 (
b1000 3
0!
#75
b100 *
b100 1
b1000 <
1!
#80
1"
1&
b1001 (
b1001 3
0!
#85
b101 *
b101 1
b1 +
b1 2
b1001 =
1!
#90
b1010 (
b1010 3
0!
#95
b10 +
b10 2
b110 *
b110 1
b110 ,
b110 8
b1010 >
1!
#100
b1011 (
b1011 3
0!
#105
b111 *
b111 1
b11 +
b11 2
b1011 ?
b111 ,
b111 8
1!
#110
b1100 (
b1100 3
0!
#115
b100 +
b100 2
b0 *
b0 1
b1000 ,
b1000 8
b1100 @
1!
#120
b1101 (
b1101 3
0!
#125
b1 *
b1 1
b101 +
b101 2
b1101 9
b101 7
b1001 ,
b1001 8
1!
#130
b1110 (
b1110 3
0!
#135
b110 +
b110 2
b10 *
b10 1
b1010 ,
b1010 8
b1110 :
b110 7
1!
#140
b1111 (
b1111 3
0!
#145
b11 *
b11 1
b111 +
b111 2
b1111 ;
b111 7
b1011 ,
b1011 8
1!
#150
b10000 (
b10000 3
0!
#155
b0 +
b0 2
b100 *
b100 1
b1100 ,
b1100 8
b10000 <
b1000 7
1!
#160
b10001 (
b10001 3
0!
#165
b101 *
b101 1
b1 +
b1 2
b10001 =
b1001 7
b1101 ,
b1101 8
1!
#170
b10010 (
b10010 3
0!
#175
b10 +
b10 2
b110 *
b110 1
b1110 ,
b1110 8
b10010 >
b1010 7
1!
#180
b10011 (
b10011 3
0!
#185
b111 *
b111 1
b11 +
b11 2
b10011 ?
b1011 7
b1111 ,
b1111 8
1!
#190
b10100 (
b10100 3
0!
#195
b100 +
b100 2
b0 *
b0 1
b10000 ,
b10000 8
b10100 @
b1100 7
1!
#200
b10101 (
b10101 3
0!
#205
b1 *
b1 1
b101 +
b101 2
b10101 9
b1101 7
b10001 ,
b10001 8
1!
#210
b10110 (
b10110 3
0!
#215
b110 +
b110 2
b10 *
b10 1
b10010 ,
b10010 8
b10110 :
b1110 7
1!
#220
b10111 (
b10111 3
0!
#225
b11 *
b11 1
b111 +
b111 2
b10111 ;
b1111 7
b10011 ,
b10011 8
1!
#230
b11000 (
b11000 3
0!
#235
b0 +
b0 2
b100 *
b100 1
b10100 ,
b10100 8
b11000 <
b10000 7
1!
#240
b11001 (
b11001 3
0!
#245
b101 *
b101 1
b1 +
b1 2
b11001 =
b10001 7
b10101 ,
b10101 8
1!
#250
b11010 (
b11010 3
0!
#255
b10 +
b10 2
b110 *
b110 1
b10110 ,
b10110 8
b11010 >
b10010 7
1!
#260
b11011 (
b11011 3
0!
#265
b111 *
b111 1
b11 +
b11 2
b11011 ?
b10011 7
b10111 ,
b10111 8
1!
#270
b11100 (
b11100 3
0!
#275
b100 +
b100 2
b0 *
b0 1
b11000 ,
b11000 8
b11100 @
b10100 7
1!
#280
b11101 (
b11101 3
0!
#285
b1 *
b1 1
b101 +
b101 2
b11101 9
b10101 7
b11001 ,
b11001 8
1!
#290
b11110 (
b11110 3
0!
#295
b110 +
b110 2
b10 *
b10 1
b11010 ,
b11010 8
b11110 :
b10110 7
1!
#300
b11111 (
b11111 3
0!
#305
b11 *
b11 1
b111 +
b111 2
b11111 ;
b10111 7
b11011 ,
b11011 8
1!
#310
b100000 (
b100000 3
0!
#315
b0 +
b0 2
b100 *
b100 1
b11100 ,
b11100 8
b100000 <
b11000 7
1!
#320
b100001 (
b100001 3
0!
#325
b101 *
b101 1
b1 +
b1 2
b100001 =
b11001 7
b11101 ,
b11101 8
1!
#330
b100010 (
b100010 3
0!
#335
b10 +
b10 2
b110 *
b110 1
b11110 ,
b11110 8
b100010 >
b11010 7
1!
#340
b100011 (
b100011 3
0!
#345
b111 *
b111 1
b11 +
b11 2
b100011 ?
b11011 7
b11111 ,
b11111 8
1!
#350
b100100 (
b100100 3
0!
#355
b100 +
b100 2
b0 *
b0 1
b100000 ,
b100000 8
b100100 @
b11100 7
1!
#360
b100101 (
b100101 3
0!
#365
b1 *
b1 1
b101 +
b101 2
b100101 9
b11101 7
b100001 ,
b100001 8
1!
#370
b100110 (
b100110 3
0!
#375
b110 +
b110 2
b10 *
b10 1
b100010 ,
b100010 8
b100110 :
b11110 7
1!
#380
b100111 (
b100111 3
0!
