$date
	Tue Feb 27 22:31:47 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fifoTestbench $end
$scope module DUT $end
$var wire 1 ! clock $end
$var wire 1 " pop $end
$var wire 1 # push $end
$var wire 8 $ pushData [7:0] $end
$var wire 1 % reset $end
$var wire 8 & popData [7:0] $end
$var wire 3 ' nextWriteAddress [2:0] $end
$var wire 3 ( nextReadAddress [2:0] $end
$var wire 1 ) isFullCounter $end
$var wire 1 * isEmptyCounter $end
$var wire 1 + full $end
$var wire 1 , empty $end
$var parameter 32 - bitWidth $end
$var parameter 32 . nrOfEntries $end
$var reg 3 / readAddress [2:0] $end
$var reg 3 0 writeAddress [2:0] $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var wire 3 1 addressA [2:0] $end
$var wire 3 2 addressB [2:0] $end
$var wire 1 ! clockA $end
$var wire 1 ! clockB $end
$var wire 8 3 dataIn [7:0] $end
$var wire 1 4 writeEnable $end
$var parameter 32 5 bitwidth $end
$var parameter 32 6 nrOfEntries $end
$var parameter 32 7 readAfterWrite $end
$var reg 8 8 dataOutA [7:0] $end
$var reg 8 9 dataOutB [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 : \memoryContent[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 ; \memoryContent[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 < \memoryContent[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 = \memoryContent[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 > \memoryContent[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 ? \memoryContent[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 @ \memoryContent[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module fifoTestbench $end
$scope module DUT $end
$scope module fifoMemory $end
$var reg 8 A \memoryContent[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1 7
b1000 6
b1000 5
b1000 .
b1000 -
$end
#0
$dumpvars
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
04
b101 3
bx 2
bx 1
b0 0
b0 /
1,
0+
x*
x)
bx (
bx '
bx &
1%
b101 $
0#
0"
0!
$end
#5
1*
0)
b0 '
b0 1
b0 (
b0 2
1!
#10
0!
#15
1!
#20
0%
0!
#25
1!
#30
0!
#35
1!
#40
14
1#
0!
#45
0*
b1 '
b1 1
b101 :
1!
#50
b110 $
b110 3
0!
#55
b10 '
b10 1
0,
b1 0
b101 &
b101 9
b110 ;
1!
#60
b111 $
b111 3
0!
#65
b11 '
b11 1
b10 0
b111 <
1!
#70
b1000 $
b1000 3
0!
#75
b100 '
b100 1
b11 0
b1000 =
1!
#80
1"
b1001 $
b1001 3
0!
#85
b101 '
b101 1
b1 (
b1 2
b100 0
b1001 >
1!
#90
b1010 $
b1010 3
0!
#95
b10 (
b10 2
b110 '
b110 1
b1 /
b101 0
b110 &
b110 9
b1010 ?
1!
#100
b1011 $
b1011 3
0!
#105
b111 '
b111 1
b11 (
b11 2
b10 /
b110 0
b1011 @
b111 &
b111 9
1!
#110
b1100 $
b1100 3
0!
#115
b100 (
b100 2
b0 '
b0 1
b11 /
b111 0
b1000 &
b1000 9
b1100 A
1!
#120
b1101 $
b1101 3
0!
#125
b1 '
b1 1
b101 (
b101 2
b100 /
b0 0
b1101 :
b101 8
b1001 &
b1001 9
1!
#130
b1110 $
b1110 3
0!
#135
b110 (
b110 2
b10 '
b10 1
b101 /
b1 0
b1010 &
b1010 9
b1110 ;
b110 8
1!
#140
b1111 $
b1111 3
0!
#145
b11 '
b11 1
b111 (
b111 2
b110 /
b10 0
b1111 <
b111 8
b1011 &
b1011 9
1!
#150
b10000 $
b10000 3
0!
#155
b0 (
b0 2
b100 '
b100 1
b111 /
b11 0
b1100 &
b1100 9
b10000 =
b1000 8
1!
#160
b10001 $
b10001 3
0!
#165
b101 '
b101 1
b1 (
b1 2
b0 /
b100 0
b10001 >
b1001 8
b1101 &
b1101 9
1!
#170
b10010 $
b10010 3
0!
#175
b10 (
b10 2
b110 '
b110 1
b1 /
b101 0
b1110 &
b1110 9
b10010 ?
b1010 8
1!
#180
b10011 $
b10011 3
0!
